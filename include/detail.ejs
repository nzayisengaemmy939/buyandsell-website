<!DOCTYPE html>
<html lang="en">
<%-include('./partial/head.ejs')%>
<body>
    <div class="decrease">
        <%-include('./partial/nave.ejs')%>
        <main>
            <div class="detail-product">
                <div>
                    <img src="/<%= Seller.file %>">
                    <div class="about-comment">
                        <form id="commentForm" data-seller-id="<%= Seller._id %>">
                            <textarea id="commentInput" placeholder="Add a comment" name="text"></textarea>
                            <button type="submit">Make Comment</button>
                        </form>
                        <div id="commentsContainer"></div>
                    </div>
                </div>
            </div>
        </main>
    </div>
   
<%-include('./partial/footer.ejs')%>
<script>
    async function fetchAndRenderComments(sellerId) {
        try {
            const response = await fetch(`/comments?sellerId=${sellerId}`);
            if (!response.ok) {
                throw new Error('Failed to fetch comments');
            }
            const comments = await response.json();
            console.log(comments);
            const commentsContainer = document.getElementById('commentsContainer');
            commentsContainer.innerHTML = '';
            console.log(sellerId);
            comments.forEach(comment => {
                const commentElement = document.createElement('div');
                const span1 = document.createElement('span');
                span1.classList.add('comment-span');
                
                if (comment.user) {
                    const userEmail = comment.user.email;
                    const email = userEmail;
                    span1.textContent = email[0].toUpperCase();
                } else {
                    span1.textContent = 'U';
                }             

                const paragraphyOfContents = document.createElement('p');
                paragraphyOfContents.appendChild(span1);
                paragraphyOfContents.classList.add("comment-text");
                
                const span3 = document.createElement('span');
                span3.classList.add("comment-span");
                span3.textContent = comment.text;
                paragraphyOfContents.appendChild(span3);
             
                commentElement.appendChild(paragraphyOfContents);
                const span2 = document.createElement('span');
                span2.classList.add("comment-span");

                function formatRelativeTime(date) {
                    const now = new Date();
                    const diff = now - date;
                    const seconds = Math.floor(diff / 1000);
                    const minutes = Math.floor(seconds / 60);
                    const hours = Math.floor(minutes / 60);
                    const days = Math.floor(hours / 24);
                    if (days > 0) {
                        return days === 1 ? '1 day ago' : `${days} days ago`;
                    } else if (hours > 0) {
                        return hours === 1 ? '1 hour ago' : `${hours} hours ago`;
                    } else if (minutes > 0) {
                        return minutes === 1 ? '1 minute ago' : `${minutes} minutes ago`;
                    } else {
                        return seconds <= 1 ? 'just now' : `${seconds} seconds ago`;
                    }
                }

                span2.textContent = formatRelativeTime(new Date(comment.date));
                paragraphyOfContents.appendChild(span2);
                commentsContainer.appendChild(commentElement);
                
                const userId = '<%= userId %>';
                const paragraphyOfContents2 = document.createElement('p');
                paragraphyOfContents2.classList.add('comment-button');
                const likeButton = document.createElement('button');
                likeButton.innerHTML = '<i class="bi bi-hand-thumbs-up-fill"></i>';
                likeButton.addEventListener('click', async () => {
                    const likeResponse = await fetch(`/comments/${comment._id}/like`, { method: 'POST' });
                    if (!likeResponse.ok) {
                        console.error('Failed to like comment');
                        return;
                    }
                    await fetchAndRenderComments(sellerId);
                });
                paragraphyOfContents2.appendChild(likeButton);
                
                if (comment.likedBy.includes(userId)) {
                    likeButton.classList.add('active');
                }
                
                const likesCount = document.createElement('span');
                likesCount.textContent = `Likes: ${comment.likedBy.length}`;
                paragraphyOfContents2.appendChild(likesCount);
                
                const dislikeButton = document.createElement('button');
                dislikeButton.innerHTML = '<i class="bi bi-hand-thumbs-down-fill"></i>';
                dislikeButton.addEventListener('click', async () => {
                    const dislikeResponse = await fetch(`/comments/${comment._id}/dislike`, { method: 'POST' });
                    if (!dislikeResponse.ok) {
                        console.error('Failed to dislike comment');
                        return;
                    }
                    await fetchAndRenderComments(sellerId);
                });
                paragraphyOfContents2.appendChild(dislikeButton);
                
                const dislikeCount = document.createElement('span');
                dislikeCount.textContent = `Dislikes: ${comment.dislikedBy.length}`;
                paragraphyOfContents2.appendChild(dislikeCount);
                commentElement.appendChild(paragraphyOfContents2);
                
                if (comment.dislikedBy.includes(userId)) {
                    dislikeButton.classList.add('active');
                }
                
                if (comment.replies && comment.replies.length > 0) {
                    const repliesList = document.createElement('ul');
                    comment.replies.forEach(reply => {
                        const replyItem = document.createElement('li');
                        replyItem.textContent = reply.text;
                        repliesList.appendChild(replyItem);
                    });
                    commentsContainer.appendChild(repliesList);
                }
                
                const replyForm = document.createElement('form');
                const replyInput = document.createElement('input');
                replyInput.type = 'text';
                replyInput.placeholder = 'Reply to this comment';
                const replyButton = document.createElement('button');
                replyButton.type = 'submit';
                replyButton.textContent = 'Reply';
                replyForm.appendChild(replyInput);
                replyForm.appendChild(replyButton);
                commentsContainer.appendChild(replyForm);
                replyForm.addEventListener('submit', async event => {
                    event.preventDefault();
                    const replyText = replyInput.value;
                    if (replyText.trim() !== '') {
                        const response = await fetch(`/comments/${comment._id}/replies`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ text: replyText })
                        });
                        if (response.ok) {
                            await fetchAndRenderComments(sellerId);
                        } else {
                            console.error('Failed to add reply');
                        }
                        replyInput.value = '';
                    }
                });
            });
        } catch (error) {
            console.error('Error fetching comments:', error);
        }
    }
    document.getElementById('commentForm').addEventListener('submit', async event => {
        event.preventDefault();
        const form = event.currentTarget;
        const sellerId = form.getAttribute('data-seller-id');
        const commentInput = document.getElementById('commentInput').value;
        const data = { text: commentInput, sellerId };
        try {
            const response = await fetch('/comments', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });
            if (!response.ok) {
                throw new Error('Failed to add comment');
            }
            await fetchAndRenderComments(sellerId);
            document.getElementById('commentInput').value = '';
        } catch (error) {
            console.error('Error adding comment:', error);
        }
    });

    document.addEventListener('DOMContentLoaded', () => {
        const sellerId = document.getElementById('commentForm').getAttribute('data-seller-id');
        fetchAndRenderComments(sellerId);
    });
</script>

</body>
</html>
